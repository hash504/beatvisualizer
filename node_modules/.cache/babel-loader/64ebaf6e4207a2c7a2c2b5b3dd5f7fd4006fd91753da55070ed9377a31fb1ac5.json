{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryce\\\\beatvisualizer\\\\src\\\\Metronome\\\\Metronome.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport \"./Metronome.css\";\nimport metronomeSfx from \"./metronome-sfx.mp3\";\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Metronome = _ref => {\n  _s();\n  let {\n    initialBpm,\n    initialDelay,\n    playback,\n    isReady,\n    start,\n    stop\n  } = _ref;\n  const [bpm, setBpm] = useState(120);\n  const [delay, setDelay] = useState();\n  const [metronome, setMetronome] = useState(0);\n  const [playSfx] = useSound(metronomeSfx, {\n    volume: 0.5\n  });\n  const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {\n    volume: 0.5\n  });\n  const handleBpmChange = useCallback(event => {\n    setBpm(event.target.value);\n  });\n  const submitBpmChange = useCallback(() => {\n    initialBpm(bpm);\n  }, [initialBpm, bpm]);\n  const handleDelayChange = useCallback(event => {\n    setDelay(event.target.value);\n  });\n  const submitDelayChange = useCallback(() => {\n    initialDelay(delay);\n  }, [initialDelay, delay]);\n  let metronomeIndex = 1;\n  const interval = 60000 / bpm;\n  const delayInterval = useRef(null);\n  const metronomeInterval = useRef(null);\n  function ready() {\n    if (isReady === true) {\n      start = () => {\n        playback(true);\n        setTimeout(() => {\n          setMetronome(1);\n          playFirstBeatSfx();\n          metronomeInterval.current = setInterval(() => {\n            if (metronomeIndex >= 4) {\n              metronomeIndex = 0;\n            }\n            metronomeIndex++;\n            setMetronome(metronomeIndex);\n            if (metronomeIndex === 1) {\n              playFirstBeatSfx();\n            } else {\n              playSfx();\n            }\n          }, interval);\n        }, delay);\n      };\n      stop = () => {\n        playback(false);\n        clearTimeout(delayInterval.current);\n        clearInterval(metronomeInterval.current);\n        metronomeInterval.current = null;\n        setMetronome(0);\n      };\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ControlButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"PlayButton\",\n        onClick: start\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"StopButton\",\n        onClick: stop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 58\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metronome\" + metronome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert BPM...\",\n          onChange: handleBpmChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitBpmChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 129\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert delay (MS)...\",\n          onChange: handleDelayChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitDelayChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 138\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Metronome, \"aLfBF2PUQAV7EhswNFzyF3N2+G4=\", false, function () {\n  return [useSound, useSound];\n});\n_c = Metronome;\nexport default Metronome;\nvar _c;\n$RefreshReg$(_c, \"Metronome\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useSound","metronomeSfx","metronomeFirstBeatSfx","jsxDEV","_jsxDEV","Metronome","_ref","_s","initialBpm","initialDelay","playback","isReady","start","stop","bpm","setBpm","delay","setDelay","metronome","setMetronome","playSfx","volume","playFirstBeatSfx","handleBpmChange","event","target","value","submitBpmChange","handleDelayChange","submitDelayChange","metronomeIndex","interval","delayInterval","metronomeInterval","ready","setTimeout","current","setInterval","clearTimeout","clearInterval","children","className","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bryce/beatvisualizer/src/Metronome/Metronome.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport \"./Metronome.css\";\r\nimport metronomeSfx from \"./metronome-sfx.mp3\";\r\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\r\n\r\n\r\nconst Metronome = ({ initialBpm, initialDelay, playback, isReady, start, stop }) => {\r\n    \r\n    const [bpm, setBpm] = useState(120);\r\n    const [delay, setDelay] = useState();\r\n    const [metronome, setMetronome] = useState(0);\r\n    const [playSfx] = useSound(metronomeSfx, {volume: 0.5});\r\n    const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {volume: 0.5});\r\n\r\n\r\n    const handleBpmChange = useCallback((event) => {\r\n        setBpm(event.target.value);\r\n    });\r\n\r\n    const submitBpmChange = useCallback(() => {\r\n        initialBpm(bpm);\r\n    }, [initialBpm, bpm]);\r\n\r\n    const handleDelayChange = useCallback((event) => {\r\n        setDelay(event.target.value);\r\n    });\r\n\r\n    const submitDelayChange = useCallback(() => {\r\n        initialDelay(delay);\r\n    }, [initialDelay, delay]);\r\n\r\n\r\n\r\n    let metronomeIndex = 1;\r\n    const interval = 60000 / bpm;\r\n    const delayInterval = useRef(null);\r\n    const metronomeInterval = useRef(null);\r\n\r\n    function ready() {\r\n        if (isReady === true) {\r\n            start = () => {\r\n        playback(true);\r\n\r\n            setTimeout(() => {\r\n                setMetronome(1);\r\n                playFirstBeatSfx();\r\n                metronomeInterval.current = setInterval(() => {\r\n                    if (metronomeIndex >= 4) {\r\n                        metronomeIndex = 0;\r\n                    }\r\n                    metronomeIndex++;\r\n                    setMetronome(metronomeIndex);\r\n\r\n                    if (metronomeIndex === 1) {\r\n                        playFirstBeatSfx();\r\n                    }\r\n                    else {\r\n                        playSfx();\r\n                    }\r\n                }, interval)\r\n            }, delay);\r\n\r\n        \r\n    };\r\n\r\n    stop = () => {\r\n        playback(false);\r\n        clearTimeout(delayInterval.current);\r\n        clearInterval(metronomeInterval.current);\r\n        metronomeInterval.current = null;\r\n        setMetronome(0);\r\n    }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"ControlButtons\">\r\n                <button id=\"PlayButton\" onClick={start}/><button id=\"StopButton\" onClick={stop}/>\r\n            </div>\r\n            <div className={\"metronome\" + metronome} />\r\n            <div className='settings'>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert BPM...' onChange={handleBpmChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitBpmChange}>Set</button>\r\n                </div>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert delay (MS)...' onChange={handleDelayChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitDelayChange}>Set</button>\r\n                </div>\r\n            </div>\r\n            {/* In the future, i might add functionality for getting information from the getsongbpm.com API, the component for it will be here. */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Metronome;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}