{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryce\\\\beatvisualizer\\\\src\\\\Metronome\\\\Metronome.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport \"./Metronome.css\";\nimport metronomeSfx from \"./metronome-sfx.mp3\";\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Metronome = _ref => {\n  _s();\n  let {\n    initialBpm,\n    initialDelay,\n    playback\n  } = _ref;\n  const [bpm, setBpm] = useState(120);\n  const [delay, setDelay] = useState();\n  const [metronome, setMetronome] = useState(0);\n  const [playSfx] = useSound(metronomeSfx, {\n    volume: 0.5\n  });\n  const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {\n    volume: 0.5\n  });\n  const handleBpmChange = useCallback(event => {\n    setBpm(event.target.value);\n  });\n  const submitBpmChange = useCallback(() => {\n    initialBpm(bpm);\n  }, [initialBpm, bpm]);\n  const handleDelayChange = useCallback(event => {\n    setDelay(event.target.value);\n  });\n  const submitDelayChange = useCallback(() => {\n    initialDelay(delay);\n  }, [initialDelay, delay]);\n  let metronomeIndex = 1;\n  const interval = 60000 / bpm;\n  const delayInterval = useRef(null);\n  const metronomeInterval = useRef(null);\n  function startMetronome() {\n    playback(true);\n    setTimeout(() => {\n      setMetronome(1);\n      playFirstBeatSfx();\n      metronomeInterval.current = setInterval(() => {\n        if (metronomeIndex >= 4) {\n          metronomeIndex = 0;\n        }\n        metronomeIndex++;\n        setMetronome(metronomeIndex);\n        if (metronomeIndex === 1) {\n          playFirstBeatSfx();\n        } else {\n          playSfx();\n        }\n      }, interval);\n    }, delay);\n  }\n  ;\n  const stopMetronome = () => {\n    playback(false);\n    clearTimeout(delayInterval.current);\n    clearInterval(metronomeInterval.current);\n    metronomeInterval.current = null;\n    setMetronome(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ControlButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"PlayButton\",\n        onClick: startMetronome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"StopButton\",\n        onClick: stopMetronome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metronome\" + metronome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert BPM...\",\n          onChange: handleBpmChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitBpmChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 129\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert delay (MS)...\",\n          onChange: handleDelayChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitDelayChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 138\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(Metronome, \"aLfBF2PUQAV7EhswNFzyF3N2+G4=\", false, function () {\n  return [useSound, useSound];\n});\n_c = Metronome;\nexport default Metronome;\nvar _c;\n$RefreshReg$(_c, \"Metronome\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useSound","metronomeSfx","metronomeFirstBeatSfx","jsxDEV","_jsxDEV","Metronome","_ref","_s","initialBpm","initialDelay","playback","bpm","setBpm","delay","setDelay","metronome","setMetronome","playSfx","volume","playFirstBeatSfx","handleBpmChange","event","target","value","submitBpmChange","handleDelayChange","submitDelayChange","metronomeIndex","interval","delayInterval","metronomeInterval","startMetronome","setTimeout","current","setInterval","stopMetronome","clearTimeout","clearInterval","children","className","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bryce/beatvisualizer/src/Metronome/Metronome.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport \"./Metronome.css\";\r\nimport metronomeSfx from \"./metronome-sfx.mp3\";\r\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\r\n\r\n\r\nconst Metronome = ({ initialBpm, initialDelay, playback }) => {\r\n    \r\n    const [bpm, setBpm] = useState(120);\r\n    const [delay, setDelay] = useState();\r\n    const [metronome, setMetronome] = useState(0);\r\n    const [playSfx] = useSound(metronomeSfx, {volume: 0.5});\r\n    const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {volume: 0.5});\r\n\r\n\r\n    const handleBpmChange = useCallback((event) => {\r\n        setBpm(event.target.value);\r\n    });\r\n\r\n    const submitBpmChange = useCallback(() => {\r\n        initialBpm(bpm);\r\n    }, [initialBpm, bpm]);\r\n\r\n    const handleDelayChange = useCallback((event) => {\r\n        setDelay(event.target.value);\r\n    });\r\n\r\n    const submitDelayChange = useCallback(() => {\r\n        initialDelay(delay);\r\n    }, [initialDelay, delay]);\r\n\r\n\r\n\r\n    let metronomeIndex = 1;\r\n    const interval = 60000 / bpm;\r\n    const delayInterval = useRef(null);\r\n    const metronomeInterval = useRef(null);\r\n\r\n\r\n    function startMetronome() {\r\n        playback(true);\r\n        \r\n            setTimeout(() => {\r\n                setMetronome(1);\r\n                playFirstBeatSfx();\r\n                metronomeInterval.current = setInterval(() => {\r\n                    if (metronomeIndex >= 4) {\r\n                        metronomeIndex = 0;\r\n                    }\r\n                    metronomeIndex++;\r\n                    setMetronome(metronomeIndex);\r\n\r\n                    if (metronomeIndex === 1) {\r\n                        playFirstBeatSfx();\r\n                    }\r\n                    else {\r\n                        playSfx();\r\n                    }\r\n                }, interval)\r\n            }, delay);\r\n\r\n        \r\n    };\r\n\r\n    const stopMetronome = () => {\r\n        playback(false);\r\n        clearTimeout(delayInterval.current);\r\n        clearInterval(metronomeInterval.current);\r\n        metronomeInterval.current = null;\r\n        setMetronome(0);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"ControlButtons\">\r\n                <button id=\"PlayButton\" onClick={startMetronome}/><button id=\"StopButton\" onClick={stopMetronome}/>\r\n            </div>\r\n            <div className={\"metronome\" + metronome} />\r\n            <div className='settings'>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert BPM...' onChange={handleBpmChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitBpmChange}>Set</button>\r\n                </div>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert delay (MS)...' onChange={handleDelayChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitDelayChange}>Set</button>\r\n                </div>\r\n            </div>\r\n            {/* In the future, i might add functionality for getting information from the getsongbpm.com API, the component for it will be here. */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Metronome;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}