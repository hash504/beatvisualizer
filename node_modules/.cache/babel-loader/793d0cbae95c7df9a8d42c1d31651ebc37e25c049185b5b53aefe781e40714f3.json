{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryce\\\\beatvisualizer\\\\src\\\\Metronome\\\\Metronome.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport \"./Metronome.css\";\nimport metronomeSfx from \"./metronome-sfx.mp3\";\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Metronome = _ref => {\n  _s();\n  let {\n    initialBpm,\n    initialDelay,\n    vidUrl\n  } = _ref;\n  const [bpm, setBpm] = useState(120);\n  const [delay, setDelay] = useState();\n  const [metronome, setMetronome] = useState(0);\n  const [playVideo, setPlayVideo] = useState(false);\n  const [playSfx] = useSound(metronomeSfx, {\n    volume: 0.5\n  });\n  const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {\n    volume: 0.5\n  });\n  const handleBpmChange = useCallback(event => {\n    setBpm(event.target.value);\n  });\n  const submitBpmChange = useCallback(() => {\n    initialBpm(bpm);\n  }, [initialBpm, bpm]);\n  const handleDelayChange = useCallback(event => {\n    setDelay(event.target.value);\n  });\n  const submitDelayChange = useCallback(() => {\n    initialDelay(delay);\n  }, [initialDelay, delay]);\n  let metronomeIndex = 1;\n  const interval = 60000 / bpm;\n  const delayInterval = useRef(null);\n  const metronomeInterval = useRef(null);\n  const startMetronome = () => {\n    setPlayVideo(true);\n    setTimeout(() => {\n      setMetronome(1);\n      playFirstBeatSfx();\n      metronomeInterval.current = setInterval(() => {\n        if (metronomeIndex >= 4) {\n          metronomeIndex = 0;\n        }\n        metronomeIndex++;\n        setMetronome(metronomeIndex);\n        if (metronomeIndex === 1) {\n          playFirstBeatSfx();\n        } else {\n          playSfx();\n        }\n      }, interval);\n    }, delay);\n  };\n  const stopMetronome = () => {\n    setPlayVideo(false);\n    clearTimeout(delayInterval.current);\n    clearInterval(metronomeInterval.current);\n    metronomeInterval.current = null;\n    setMetronome(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(VideoPlayer, {\n      videoUrl: vidUrl,\n      playback: playVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ControlButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"PlayButton\",\n        onClick: startMetronome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"StopButton\",\n        onClick: stopMetronome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metronome\" + metronome\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert BPM...\",\n          onChange: handleBpmChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitBpmChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 129\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settingbars\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"settings\",\n          type: \"number\",\n          className: \"text\",\n          placeholder: \"Insert delay (MS)...\",\n          onChange: handleDelayChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text\",\n          id: \"settingbutton\",\n          onClick: submitDelayChange,\n          children: \"Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 138\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(Metronome, \"7aHQEDw0C8ydDcZkjIJdPynGQCI=\", false, function () {\n  return [useSound, useSound];\n});\n_c = Metronome;\nexport default Metronome;\nvar _c;\n$RefreshReg$(_c, \"Metronome\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useSound","metronomeSfx","metronomeFirstBeatSfx","VideoPlayer","jsxDEV","_jsxDEV","Metronome","_ref","_s","initialBpm","initialDelay","vidUrl","bpm","setBpm","delay","setDelay","metronome","setMetronome","playVideo","setPlayVideo","playSfx","volume","playFirstBeatSfx","handleBpmChange","event","target","value","submitBpmChange","handleDelayChange","submitDelayChange","metronomeIndex","interval","delayInterval","metronomeInterval","startMetronome","setTimeout","current","setInterval","stopMetronome","clearTimeout","clearInterval","children","videoUrl","playback","fileName","_jsxFileName","lineNumber","columnNumber","className","id","onClick","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bryce/beatvisualizer/src/Metronome/Metronome.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport \"./Metronome.css\";\r\nimport metronomeSfx from \"./metronome-sfx.mp3\";\r\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\r\nimport VideoPlayer from \"../VideoPlayer/VideoPlayer\";\r\n\r\nconst Metronome = ({ initialBpm, initialDelay, vidUrl }) => {\r\n    \r\n    const [bpm, setBpm] = useState(120);\r\n    const [delay, setDelay] = useState();\r\n    const [metronome, setMetronome] = useState(0);\r\n    const [playVideo, setPlayVideo] = useState(false);\r\n    const [playSfx] = useSound(metronomeSfx, {volume: 0.5});\r\n    const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {volume: 0.5});\r\n\r\n\r\n    const handleBpmChange = useCallback((event) => {\r\n        setBpm(event.target.value);\r\n    });\r\n\r\n    const submitBpmChange = useCallback(() => {\r\n        initialBpm(bpm);\r\n    }, [initialBpm, bpm]);\r\n\r\n    const handleDelayChange = useCallback((event) => {\r\n        setDelay(event.target.value);\r\n    });\r\n\r\n    const submitDelayChange = useCallback(() => {\r\n        initialDelay(delay);\r\n    }, [initialDelay, delay]);\r\n\r\n    let metronomeIndex = 1;\r\n    const interval = 60000 / bpm;\r\n    const delayInterval = useRef(null);\r\n    const metronomeInterval = useRef(null);\r\n\r\n    \r\n\r\n    const startMetronome = () => {\r\n        setPlayVideo(true); \r\n\r\n        setTimeout(() => {\r\n            setMetronome(1);\r\n            playFirstBeatSfx();\r\n            metronomeInterval.current = setInterval(() => {\r\n                if (metronomeIndex >= 4) {\r\n                    metronomeIndex = 0;\r\n                }\r\n                metronomeIndex++;\r\n                setMetronome(metronomeIndex);\r\n\r\n                if (metronomeIndex === 1) {\r\n                    playFirstBeatSfx();\r\n                }\r\n                else {\r\n                    playSfx();\r\n                }\r\n            }, interval)\r\n        }, delay);   \r\n\r\n        \r\n    };\r\n    \r\n    const stopMetronome = () => {\r\n        setPlayVideo(false); \r\n        clearTimeout(delayInterval.current);\r\n        clearInterval(metronomeInterval.current);\r\n        metronomeInterval.current = null;\r\n        setMetronome(0);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <VideoPlayer\r\n                videoUrl={vidUrl}\r\n                playback={playVideo} \r\n            />\r\n            <div className=\"ControlButtons\">\r\n                <button id=\"PlayButton\" onClick={startMetronome}/><button id=\"StopButton\" onClick={stopMetronome}/>\r\n            </div>\r\n            <div className={\"metronome\" + metronome} />\r\n            <div className='settings'>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert BPM...' onChange={handleBpmChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitBpmChange}>Set</button>\r\n                </div>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert delay (MS)...' onChange={handleDelayChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitDelayChange}>Set</button>\r\n                </div>\r\n            </div>\r\n            {/* In the future, i might add functionality for getting information from the getsongbpm.com API, the component for it will be here. */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Metronome;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}