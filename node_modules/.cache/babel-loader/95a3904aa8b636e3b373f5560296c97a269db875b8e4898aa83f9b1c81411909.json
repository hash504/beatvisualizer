{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bryce\\\\beatvisualizer\\\\src\\\\Metronome\\\\Metronome.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport \"./Metronome.css\";\nimport metronomeSfx from \"./metronome-sfx.mp3\";\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Metronome = _ref => {\n  _s();\n  let {\n    initialBpm,\n    initialDelay,\n    playback,\n    isReady\n  } = _ref;\n  return function (isReady) {\n    const [bpm, setBpm] = useState(120);\n    const [delay, setDelay] = useState();\n    const [metronome, setMetronome] = useState(0);\n    const [playSfx] = useSound(metronomeSfx, {\n      volume: 0.5\n    });\n    const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {\n      volume: 0.5\n    });\n    const handleBpmChange = useCallback(event => {\n      setBpm(event.target.value);\n    });\n    const submitBpmChange = useCallback(() => {\n      initialBpm(bpm);\n    }, [initialBpm, bpm]);\n    const handleDelayChange = useCallback(event => {\n      setDelay(event.target.value);\n    });\n    const submitDelayChange = useCallback(() => {\n      initialDelay(delay);\n    }, [initialDelay, delay]);\n    let metronomeIndex = 1;\n    const interval = 60000 / bpm;\n    const delayInterval = useRef(null);\n    const metronomeInterval = useRef(null);\n    var isReady = useRef(null);\n    function startMetronome() {\n      playback(true);\n      isReady = setTimeout(() => {\n        setMetronome(1);\n        playFirstBeatSfx();\n        metronomeInterval.current = setInterval(() => {\n          if (metronomeIndex >= 4) {\n            metronomeIndex = 0;\n          }\n          metronomeIndex++;\n          setMetronome(metronomeIndex);\n          if (metronomeIndex === 1) {\n            playFirstBeatSfx();\n          } else {\n            playSfx();\n          }\n        }, interval);\n      }, delay);\n    }\n    ;\n    const stopMetronome = () => {\n      playback(false);\n      clearTimeout(delayInterval.current);\n      clearInterval(metronomeInterval.current);\n      metronomeInterval.current = null;\n      setMetronome(0);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ControlButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"PlayButton\",\n          onClick: startMetronome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"StopButton\",\n          onClick: stopMetronome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 67\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metronome\" + metronome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingbars\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"settings\",\n            type: \"number\",\n            className: \"text\",\n            placeholder: \"Insert BPM...\",\n            onChange: handleBpmChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text\",\n            id: \"settingbutton\",\n            onClick: submitBpmChange,\n            children: \"Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 129\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settingbars\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"settings\",\n            type: \"number\",\n            className: \"text\",\n            placeholder: \"Insert delay (MS)...\",\n            onChange: handleDelayChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"text\",\n            id: \"settingbutton\",\n            onClick: submitDelayChange,\n            children: \"Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 138\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, _this);\n  }(isReady);\n};\n_s(Metronome, \"lxuGTyVtgp1kydSj4qt366o3aNc=\", false, function () {\n  return [useSound, useSound];\n});\n_c = Metronome;\nexport default Metronome;\nvar _c;\n$RefreshReg$(_c, \"Metronome\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useSound","metronomeSfx","metronomeFirstBeatSfx","jsxDEV","_jsxDEV","Metronome","_ref","_s","initialBpm","initialDelay","playback","isReady","bpm","setBpm","delay","setDelay","metronome","setMetronome","playSfx","volume","playFirstBeatSfx","handleBpmChange","event","target","value","submitBpmChange","handleDelayChange","submitDelayChange","metronomeIndex","interval","delayInterval","metronomeInterval","startMetronome","setTimeout","current","setInterval","stopMetronome","clearTimeout","clearInterval","children","className","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_this","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Users/bryce/beatvisualizer/src/Metronome/Metronome.js"],"sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport \"./Metronome.css\";\r\nimport metronomeSfx from \"./metronome-sfx.mp3\";\r\nimport metronomeFirstBeatSfx from \"./metronome-sfx-firstbeat.mp3\";\r\n\r\n\r\nconst Metronome = ({ initialBpm, initialDelay, playback, isReady }) => {\r\n    \r\n    const [bpm, setBpm] = useState(120);\r\n    const [delay, setDelay] = useState();\r\n    const [metronome, setMetronome] = useState(0);\r\n    const [playSfx] = useSound(metronomeSfx, {volume: 0.5});\r\n    const [playFirstBeatSfx] = useSound(metronomeFirstBeatSfx, {volume: 0.5});\r\n\r\n\r\n    const handleBpmChange = useCallback((event) => {\r\n        setBpm(event.target.value);\r\n    });\r\n\r\n    const submitBpmChange = useCallback(() => {\r\n        initialBpm(bpm);\r\n    }, [initialBpm, bpm]);\r\n\r\n    const handleDelayChange = useCallback((event) => {\r\n        setDelay(event.target.value);\r\n    });\r\n\r\n    const submitDelayChange = useCallback(() => {\r\n        initialDelay(delay);\r\n    }, [initialDelay, delay]);\r\n\r\n    let metronomeIndex = 1;\r\n    const interval = 60000 / bpm;\r\n    const delayInterval = useRef(null);\r\n    const metronomeInterval = useRef(null);\r\n    var isReady = useRef(null);\r\n\r\n    function startMetronome() {\r\n        playback(true);\r\n\r\n\r\n            \r\n        isReady = setTimeout(() => {\r\n            setMetronome(1);\r\n            playFirstBeatSfx();\r\n            metronomeInterval.current = setInterval(() => {\r\n                if (metronomeIndex >= 4) {\r\n                    metronomeIndex = 0;\r\n                }\r\n                metronomeIndex++;\r\n                setMetronome(metronomeIndex);\r\n\r\n                if (metronomeIndex === 1) {\r\n                    playFirstBeatSfx();\r\n                }\r\n                else {\r\n                    playSfx();\r\n                }\r\n            }, interval)\r\n        }, delay);\r\n\r\n\r\n    };\r\n\r\n    const stopMetronome = () => {\r\n        playback(false);\r\n        clearTimeout(delayInterval.current);\r\n        clearInterval(metronomeInterval.current);\r\n        metronomeInterval.current = null;\r\n        setMetronome(0);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"ControlButtons\">\r\n                <button id=\"PlayButton\" onClick={startMetronome}/><button id=\"StopButton\" onClick={stopMetronome}/>\r\n            </div>\r\n            <div className={\"metronome\" + metronome} />\r\n            <div className='settings'>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert BPM...' onChange={handleBpmChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitBpmChange}>Set</button>\r\n                </div>\r\n                <div className='settingbars'>\r\n                    <input id=\"settings\" type=\"number\" className=\"text\" placeholder='Insert delay (MS)...' onChange={handleDelayChange}/><button className=\"text\" id=\"settingbutton\" onClick={submitDelayChange}>Set</button>\r\n                </div>\r\n            </div>\r\n            {/* In the future, i might add functionality for getting information from the getsongbpm.com API, the component for it will be here. */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Metronome;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC5D,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,iBAAiB;AACxB,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,qBAAqB,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,SAAS,GAAGC,IAAA;EAAAC,EAAA;EAAA,IAAC;IAAEC,UAAU;IAAEC,YAAY;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAAL,IAAA;EAAA,iBAAAK,OAAA,EAAK;IAEnE,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGhB,QAAQ,CAAC,GAAG,CAAC;IACnC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,EAAE;IACpC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;IAC7C,MAAM,CAACqB,OAAO,CAAC,GAAGlB,QAAQ,CAACC,YAAY,EAAE;MAACkB,MAAM,EAAE;IAAG,CAAC,CAAC;IACvD,MAAM,CAACC,gBAAgB,CAAC,GAAGpB,QAAQ,CAACE,qBAAqB,EAAE;MAACiB,MAAM,EAAE;IAAG,CAAC,CAAC;IAGzE,MAAME,eAAe,GAAGvB,WAAW,CAAEwB,KAAK,IAAK;MAC3CT,MAAM,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMC,eAAe,GAAG3B,WAAW,CAAC,MAAM;MACtCU,UAAU,CAACI,GAAG,CAAC;IACnB,CAAC,EAAE,CAACJ,UAAU,EAAEI,GAAG,CAAC,CAAC;IAErB,MAAMc,iBAAiB,GAAG5B,WAAW,CAAEwB,KAAK,IAAK;MAC7CP,QAAQ,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAChC,CAAC,CAAC;IAEF,MAAMG,iBAAiB,GAAG7B,WAAW,CAAC,MAAM;MACxCW,YAAY,CAACK,KAAK,CAAC;IACvB,CAAC,EAAE,CAACL,YAAY,EAAEK,KAAK,CAAC,CAAC;IAEzB,IAAIc,cAAc,GAAG,CAAC;IACtB,MAAMC,QAAQ,GAAG,KAAK,GAAGjB,GAAG;IAC5B,MAAMkB,aAAa,GAAG/B,MAAM,CAAC,IAAI,CAAC;IAClC,MAAMgC,iBAAiB,GAAGhC,MAAM,CAAC,IAAI,CAAC;IACtC,IAAIY,OAAO,GAAGZ,MAAM,CAAC,IAAI,CAAC;IAE1B,SAASiC,cAAcA,CAAA,EAAG;MACtBtB,QAAQ,CAAC,IAAI,CAAC;MAIdC,OAAO,GAAGsB,UAAU,CAAC,MAAM;QACvBhB,YAAY,CAAC,CAAC,CAAC;QACfG,gBAAgB,EAAE;QAClBW,iBAAiB,CAACG,OAAO,GAAGC,WAAW,CAAC,MAAM;UAC1C,IAAIP,cAAc,IAAI,CAAC,EAAE;YACrBA,cAAc,GAAG,CAAC;UACtB;UACAA,cAAc,EAAE;UAChBX,YAAY,CAACW,cAAc,CAAC;UAE5B,IAAIA,cAAc,KAAK,CAAC,EAAE;YACtBR,gBAAgB,EAAE;UACtB,CAAC,MACI;YACDF,OAAO,EAAE;UACb;QACJ,CAAC,EAAEW,QAAQ,CAAC;MAChB,CAAC,EAAEf,KAAK,CAAC;IAGb;IAAC;IAED,MAAMsB,aAAa,GAAGA,CAAA,KAAM;MACxB1B,QAAQ,CAAC,KAAK,CAAC;MACf2B,YAAY,CAACP,aAAa,CAACI,OAAO,CAAC;MACnCI,aAAa,CAACP,iBAAiB,CAACG,OAAO,CAAC;MACxCH,iBAAiB,CAACG,OAAO,GAAG,IAAI;MAChCjB,YAAY,CAAC,CAAC,CAAC;IACnB,CAAC;IAKD,oBACIb,OAAA;MAAAmC,QAAA,gBACInC,OAAA;QAAKoC,SAAS,EAAC,gBAAgB;QAAAD,QAAA,gBAC3BnC,OAAA;UAAQqC,EAAE,EAAC,YAAY;UAACC,OAAO,EAAEV;QAAe;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAA,CAAE,eAAA3C,OAAA;UAAQqC,EAAE,EAAC,YAAY;UAACC,OAAO,EAAEN;QAAc;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAA,CAAE;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAA,CACjG,eACN3C,OAAA;QAAKoC,SAAS,EAAE,WAAW,GAAGxB;MAAU;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAA,CAAG,eAC3C3C,OAAA;QAAKoC,SAAS,EAAC,UAAU;QAAAD,QAAA,gBACrBnC,OAAA;UAAKoC,SAAS,EAAC,aAAa;UAAAD,QAAA,gBACxBnC,OAAA;YAAOqC,EAAE,EAAC,UAAU;YAACO,IAAI,EAAC,QAAQ;YAACR,SAAS,EAAC,MAAM;YAACS,WAAW,EAAC,eAAe;YAACC,QAAQ,EAAE7B;UAAgB;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAC,KAAA,CAAE,eAAA3C,OAAA;YAAQoC,SAAS,EAAC,MAAM;YAACC,EAAE,EAAC,eAAe;YAACC,OAAO,EAAEjB,eAAgB;YAAAc,QAAA,EAAC;UAAG;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAC,KAAA,CAAS;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAA,CAC5L,eACN3C,OAAA;UAAKoC,SAAS,EAAC,aAAa;UAAAD,QAAA,gBACxBnC,OAAA;YAAOqC,EAAE,EAAC,UAAU;YAACO,IAAI,EAAC,QAAQ;YAACR,SAAS,EAAC,MAAM;YAACS,WAAW,EAAC,sBAAsB;YAACC,QAAQ,EAAExB;UAAkB;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAC,KAAA,CAAE,eAAA3C,OAAA;YAAQoC,SAAS,EAAC,MAAM;YAACC,EAAE,EAAC,eAAe;YAACC,OAAO,EAAEf,iBAAkB;YAAAY,QAAA,EAAC;UAAG;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,GAAAC,KAAA,CAAS;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,GAAAC,KAAA,CACvM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAA,CACJ;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAA,CAEJ;EAEd,CAAC,CAAApC,OAAA;AAAA;AAAAJ,EAAA,CAtFKF,SAAS;EAAA,QAKOL,QAAQ,EACCA,QAAQ;AAAA;AAAAmD,EAAA,GANjC9C,SAAS;AAwFf,eAAeA,SAAS;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}